@using Newtonsoft.Json
<html class="pixel-ratio-2 retina watch-active-state">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <link href="~/favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <link rel="apple-touch-icon" href="~/Content/mestekg.png" />
    <script type="text/javascript" src="https://maps.google.com/maps/api/js?v=3&key=AIzaSyCVCvofl8bKcPyHTK_Ony2qVn7FGg6SzDQ&libraries=geometry"></script>
    <title>Super Golf League</title>

    @Styles.Render("~/Content/css")


</head>
<body class="framework7-root">
    <div class="views tabs toolbar-through">
        <div id="view-1" class="view view-main tab active">
            <div class="navbar">
                <div class="navbar-inner navbar-on-center">
                    <div class="center sliding" id="distance"> Super Golf League</div>
                    <div class="right contact-edit-link">

                    </div>
                </div>
            </div>
            <div class="pages navbar-through toolbar-through">
                <div data-page="index-1" class="page">
                    <div id="text">initializing</div>
                    <div id="map"></div>
                    <div class="page-content">
                        <div class="content-block-title">@*<img src="~/Content/page-start.png" />*@<br /><h1>@ViewBag.Title</h1></div>
                        <div class="content-block">
                            @RenderBody()
                        </div>

                    </div>
                </div>
            </div>
        </div>

        <div class="toolbar tabbar tabbar-labels">
            <div class="end-page-margin">
                @*<div class="end-page"><img src="~/Content/page-end.png" /></div>*@
            </div>
            <div class="toolbar-inner">
                <a href="@Url.Action("Index","Home")" class="tab-link"><i class="icon f7-icons">home</i><span class="tabbar-label">Home</span></a>
                <a href="@Url.Action("Game","Home")" class="tab-link"> <i class="icon f7-icons">graph_round</i><span class="tabbar-label">Admin</span></a>
                <a href="@Url.Action("Create","Cards")" class="tab-link"><i class="icon f7-icons">photos</i><span class="tabbar-label">New Card</span></a>
                <a href="@Url.Action("Index","Cards")" class="tab-link"><i class="icon f7-icons">favorites</i><span class="tabbar-label">Manage</span></a>
                @Html.Partial("_LoginPartial")
            </div>
        </div>
    </div>


    @Scripts.Render("~/bundles/jquery")

    @Scripts.Render("~/bundles/bootstrap")

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Add the form submission logic
  var scoreUpdateButton = document.getElementById('scoreUpdate');
  if (scoreUpdateButton) {
    scoreUpdateButton.addEventListener('click', function (e) {
      e.preventDefault(); // Prevent the default form submission
      var url = '@Url.Action("EditJson", "Cards")'; // Make sure this URL is correct
      var formElement = document.getElementById('jsonSubmit');
      var formData = new FormData(formElement);

      fetch(url, {
        method: 'POST',
        body: formData
      })
      .then(function(response) {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(function(data) {
        console.log('Form submitted successfully');
        // Navigate to home page - adjust this to your Framework7 routing if needed
        window.location.href = '@Url.Action("Index", "Home")';
      })
      .catch(function(error) {
        console.error('Error submitting form:', error);
        // Handle errors here
      });
    });
  }
});
</script>
    @RenderSection("scripts", required: false)
    <script type="text/javascript" src="~/Scripts/compass.js"></script>
    <script>
        //this code is for  the compass
        function startCompass() {

            var byId = function (id) {
                return document.getElementById(id);
            };
            var text = function (id, value) {
                byId(id).innerHTML = value;
            };
            var transform = function (id, commands) {
                var props = ['transform', 'webkitTransform', 'mozTransform',
                    'msTransform', 'oTransform'];
                var node = byId(id);
                if (!node) { } else {
                for (var i = 0; i < props.length; i++) {
                    if (typeof (node.style[props[i]]) != 'undefined') {
                        node.style[props[i]] = commands;
                        break;
                    }
                    }
                }
            };
            var round = function (value) {
                return Math.round(value * 100) / 100;
            };

            Compass.noSupport(function () {
                text('text', 'no compass support');

            }).needGPS(function () {
                text('text', 'need GPS');
            }).needMove(function () {
                text('text', 'need move');
            }).init(function (method) {
                if (method == 'orientationAndGPS') {
                    text('meta', 'GPS diff: ' + round(Compass._gpsDiff));
                }
            }).watch(function (heading) {
                text('text', round(heading));
                transform('compass', 'rotate(' + (-heading) + 'deg)');
            });
        }
        //this code prompts user to allow motions sensor needed for the compass

        var neverBeenClicked = true;

        const argFunc = function () {
            if (neverBeenClicked === true) {
                neverBeenClicked = false;
            }
        }

        function aoskDeviceMotion() {
            document.querySelector('#overlay').addEventListener(
                'click', _askDeviceMotion, false);

        }

        function _askDeviceMotion() {
            askDeviceMotion(argFunc)
        }

        function askDeviceMotion(funcArg) {

            try {
                if (
                    DeviceMotionEvent &&
                    typeof DeviceMotionEvent.requestPermission === 'function'
                ) {
                    DeviceMotionEvent.requestPermission().then(
                        response => {
                            if (response === 'granted') {
                                grantedDeviceMotion(funcArg);

                                //if there are permissions then start the compass
                                startCompass();

                            } else {
                                console.log('Device Motion permission not granted.')
                            }
                        })
                        .catch(console.error)
                } else {
                    grantedDeviceMotion(funcArg);
                    startCompass();
                }
            } catch (oops) {
                console.log('Your device and application combination do not support device motion events.')
            }
        }

        function grantedDeviceMotion(funcArg) {
            window.addEventListener(
                'devicemotion',
                funcArg,
                false
            );
        }
    </script>
    <script>
        //hole coordinates
        var linkLoc = JSON.parse('@Html.Raw(@ViewBag.CourseCoords)');
        var drivesData = JSON.parse('@Html.Raw(@ViewBag.Drives)');
        
        var too = "";

        //$("#dis").click(function () {
        //    _askDeviceMotion();
        //    if (navigator.geolocation) {
        //        navigator.geolocation.getCurrentPosition(getDistanceToLink);
        //    } else {
        //        x.innerHTML = "Geolocation is not supported by this browser.";
        //    }
        //});

        $(document).ready(function () {
            _askDeviceMotion();

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(getDistanceToLink);
            } else {
                x.innerHTML = "Geolocation is not supported by this browser.";
            }
        });

            // Function to add markers for drives
        // Function to add markers for drives
        function addDriveMarkers(map) {
            clearMarkers();

            drivesData.forEach(function (drive) {
                var markerIcon;
                var currentHole = pin()[1];
                // Determine the marker color based on the drive distance
                if (drive.distance < 100) {
                    markerIcon = {
                        url: 'https://maps.google.com/mapfiles/ms/icons/yellow-dot.png'
                    };
                } else if (drive.distance >= 100 && drive.distance < 200) {
                    markerIcon = {
                        url: 'https://maps.google.com/mapfiles/ms/icons/red-dot.png'
                    };
                } else {
                    markerIcon = {
                        url: 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png'
                    };
                }

                var marker = new google.maps.Marker({
                    position: { lat: drive.driveLat, lng: drive.driveLn },
                    map: map,
                    icon: markerIcon,
                    title: 'Drive on ' + drive.dDate.toString()
                });

                var infowindow = new google.maps.InfoWindow({
                    content: 'Date: ' + drive.dDate.toString() + '<br>Distance: ' + drive.distance + ' yards'
                });

                marker.addListener('click', function () {
                    infowindow.open(map, marker);
                });
                if (currentHole == drive.Hole) {
                    markers.push(marker);
                } 
            });

            // Refresh the map after adding markers
            refreshMap(map);
        }

            // Array to store markers
            var markers = [];

            // Function to clear all markers from the map
            function clearMarkers() {
                markers.forEach(function (marker) {
                    marker.setMap(null);
                });
                markers = [];
            }

            // Function to refresh the map
            function refreshMap(map) {
                // Get the current bounds of the map
                var bounds = map.getBounds();

                // Create a new instance of the map with the same options
                var mapOptions = {
                    zoom: map.getZoom(),
                    center: map.getCenter(),
                    mapTypeId: map.getMapTypeId(),
                    mapTypeControl: false,
                    fullscreenControl: false,
                    streetViewControl: false,
                    zoomControl: false,
                };

                // Create a new map instance
                var newMap = new google.maps.Map(document.getElementById('map'), mapOptions);

                var compassControlDiv = document.createElement('div');
                var compassControl = new CompassControl(compassControlDiv, map);
                compassControlDiv.index = 1;
                newMap.controls[google.maps.ControlPosition.TOP_CENTER].push(compassControlDiv);

                // Add the markers to the new map
                markers.forEach(function (marker) {
                    marker.setMap(newMap);
                });

                // Replace the old map with the new map
                map = newMap;
            }


            // Control to display drives
            function DrivesControl(controlDiv) {
                var controlUI = document.createElement('div');
                controlUI.style.backgroundColor = '#fff';
                controlUI.style.border = '2px solid #fff';
                controlUI.style.borderRadius = '3px';
                controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
                controlUI.style.cursor = 'pointer';
                controlUI.style.marginBottom = '40px';
                
                controlUI.style.textAlign = 'center';
                controlUI.title = 'Click to show drives';
                controlDiv.appendChild(controlUI);

                var controlText = document.createElement('div');
                controlText.style.color = 'rgb(25,25,25)';
                controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
                controlText.style.fontSize = '16px';
                controlText.style.lineHeight = '38px';
                controlText.style.paddingLeft = '5px';
                controlText.style.paddingRight = '5px';
                controlText.innerHTML = 'Show Drives';
                controlUI.appendChild(controlText);

                controlUI.addEventListener('click', function () {
                    /*initMap(controlDiv.map);*/
                    addDriveMarkers(controlDiv.map);
                });
            }

        //calculates distance between two points in km's
        function calcDistance(p1, p2) {
            console.log(p1);
            console.log(p2);
            return (google.maps.geometry.spherical.computeDistanceBetween(p1, p2) / 1000).toFixed(4);
        };

        function CenterControl(controlDiv, map) {

            // Set CSS for the control border.
            var controlUI = document.createElement('div');
            controlUI.style.backgroundColor = '#fff';
            controlUI.style.border = '2px solid #fff';
            controlUI.style.borderRadius = '3px';
            controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
            controlUI.style.cursor = 'pointer';
            controlUI.style.marginBottom = '40px';
            controlUI.style.marginRight = '10px';


            controlUI.style.textAlign = 'center';
            controlUI.title = 'Click to show drives';
            controlDiv.appendChild(controlUI);

            // Set CSS for the control interior.
            var controlText = document.createElement('div');
            controlText.style.color = 'rgb(25,25,25)';
            controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
            controlText.style.fontSize = '16px';
            controlText.style.lineHeight = '38px';
            controlText.style.paddingLeft = '5px';
            controlText.style.paddingRight = '5px';
            controlText.innerHTML = 'Distance';
            controlUI.appendChild(controlText);

            // iOS toggle full screen
            controlUI.addEventListener('click', function () {
                    _askDeviceMotion();
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(getDistanceToPoint);
                    } else {
                        x.innerHTML = "Geolocation is not supported by this browser.";
                    }
            });

        };
        var marker1, marker2;
        var poly;
        function CompassControl(compassDiv, map) {

            // Set CSS for the control border.
            var controlUI = document.createElement('div');
            controlUI.style.overflow = 'hidden';
            controlUI.style.position = 'absolute';
            controlUI.style.width = '35px';
            controlUI.style.height = '35px';
            controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
            controlUI.style.cursor = 'pointer';
            controlUI.style.right = '-27px';
            controlUI.style.margin = '10px 12px';
            controlUI.style.textAlign = 'center';
            controlUI.style.backgroundColor = 'black';
            controlUI.style.borderRadius = '18px';
            controlUI.title = 'Click to compass the map';
            compassDiv.appendChild(controlUI);

            // Set CSS for the control interior.
            var controlText = document.createElement('img');
            controlText.src = 'https://maps.gstatic.com/mapfiles/api-3/images/sv9.png'
            controlText.style.position = 'absolute';
            controlText.style.left = '-46px';
            controlText.style.top = '-8px';
            controlText.style.height = '175px';
            controlText.style.width = '164px';
            controlText.style.border = '0';
            controlText.style.padding = '0';
            controlText.style.margin = '0';
            controlUI.appendChild(controlText);

            // iOS toggle full screen
            controlUI.addEventListener('click', function () {
                _askDeviceMotion();
                navigator.geolocation.getCurrentPosition(function (location) {
                    var pins = new pin();
                    var p2 = pins[0];
                    var p1 = new google.maps.LatLng(location.coords.latitude, location.coords.longitude);
                    var marker2 = new google.maps.Marker({
                        position: new google.maps.LatLng(location.coords.latitude, location.coords.longitude),
                        icon: new google.maps.MarkerImage('/Content/map-pin-red.png'),
                        map: map
                    });

                    var boundaries = new google.maps.LatLngBounds();
                    boundaries.extend(p1);
                    boundaries.extend(p2);
                    map.fitBounds(boundaries);
                    /*$('div[tabindex=0]').attr('id', 'compass');*/
                    $('div.gm-style').children().first().attr('id', 'compass');
                });
                //console.log(p1);




            });

        };
        var markerD, markerT;
        function DriveDistanceControl(distanceDiv, map) {

            // Set CSS for the control border.
            var controlUI = document.createElement('div');
            controlUI.style.backgroundColor = '#fff';
            controlUI.style.borderRadius = '3px';
            controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
            controlUI.style.cursor = 'pointer';
            controlUI.style.marginRight = '10px';
            controlUI.style.textAlign = 'center';
            controlUI.title = 'Click to get your drives distance';
            distanceDiv.appendChild(controlUI);

            // Set CSS for the control interior.
            var controlText = document.createElement('div');
            controlText.style.color = 'rgb(25,25,25)';
            controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
            controlText.style.marginTop = '10px';
            controlText.style.fontSize = '16px';
            controlText.style.lineHeight = '38px';
            controlText.style.paddingLeft = '5px';
            controlText.style.paddingRight = '5px';
            controlText.innerHTML = 'Calculate Drive';
            controlUI.appendChild(controlText);

            //Show Drive Distance
            controlUI.addEventListener('click', function () {

                if (typeof markerT !== 'undefined' && typeof markerD !== 'undefined') {
                    $("#wor").parent('div').css({ "background-color": "black", "color": "white" });
                    $("#wor").css({ "color": "white", 'font-size': '.9em', 'left': '0' });
                    $("#distance").html((calcDistance(markerT.position, markerD.position) * 1093.61).toFixed(2) + " yds");

                var hole = pin()[1];
                var driveData = {
                    CourseName: linkLoc[0]["CourseName"],
                    Hole: hole,
                    dDate: new Date(), // Set the date as required
                    teeLat: markerT.getPosition().lat(), // Set the latitude and longitude values
                    teeLn: markerT.getPosition().lng(),
                    driveLat: markerD.getPosition().lat(),
                    driveLn: markerD.getPosition().lng(),
                    distance: (calcDistance(markerT.position, markerD.position) * 1093.61).toFixed(2)
                };

                $.ajax({
                    url: '@Url.Action("Create", "Drives")', // Replace with your action method URL
                    data: JSON.stringify(driveData),
                    type: "POST",
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    cache: false,
                    success: function (response) {
                        // Handle the successful response
                        console.log(response);
                         window.location.href = '@Url.Action("Index", "Home")';
                    },
                    error: function (xhr, status, error) {
                        // Handle the error
                        console.log(error);
                    }
                });
                    } else {
                        $("#distance").parent('div').css({ "background-color": "black", "color": "white" });
                        $("#distance").css({ "color": "white", 'font-size': '.9em', 'left': '0' });
                        $("#distance").html("Set Your Markers");
                    }
                });

        }

        function CardControl(cardDiv, map) {
            // Set CSS for the control border.
            var controlUI = document.createElement('div');
            controlUI.style.backgroundColor = '#fff';
            controlUI.style.borderRadius = '3px';
            controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
            controlUI.style.cursor = 'pointer';
            controlUI.style.marginTop = '10px';
            controlUI.style.marginLeft = '10px';
            controlUI.style.textAlign = 'center';
            controlUI.title = 'Click to get your drives distance';
            controlUI.zIndex = '99999';
            cardDiv.appendChild(controlUI);

            // Set CSS for the control interior.
            var controlText = document.createElement('div');
            controlText.style.color = 'rgb(25,25,25)';
            controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
            
            controlText.style.fontSize = '16px';
            controlText.style.lineHeight = '38px';
            controlText.style.paddingLeft = '5px';
            controlText.style.paddingRight = '5px';
            controlText.innerHTML = 'Hide Card';
            controlUI.appendChild(controlText);

            // Toggle face-card visibility
            var isVisible = true;
            controlUI.addEventListener('click', function () {
                var faceCard = document.querySelector('.page-content');
                if (faceCard) {
                    if (isVisible) {
                        faceCard.style.display = 'none';
                        faceCard.style.visibility = 'hidden';
                        faceCard.style.lineHeight = '0';
                        controlText.innerHTML = 'Show Card';
                    } else {
                        faceCard.style.display = 'block';
                        faceCard.style.visibility = 'visible';
                        faceCard.style.lineHeight = 'normal';
                        controlText.innerHTML = 'Hide Card';
                    }
                    isVisible = !isVisible;
                }
            });
        }


        function TeeControl(teeDiv, map) {
            // Set CSS for the control border.
            var controlUI = document.createElement('div');
            controlUI.style.backgroundColor = '#fff';
            controlUI.style.borderRadius = '3px';
            controlUI.style.marginLeft = '15px';
            controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
            controlUI.style.cursor = 'pointer';
            controlUI.style.marginRight = '10px';
            controlUI.style.textAlign = 'center';

            controlUI.style.alignItems = 'center'; // Add this line to vertically center the icon and text

            // Add an icon to the custom control element
            var customControlIcon = document.createElement('img');
            customControlIcon.src = 'https://maps.google.com/mapfiles/ms/icons/yellow-dot.png';
            customControlIcon.alt = 'Custom Control Icon';
            customControlIcon.style.padding = '5px';
            controlUI.appendChild(customControlIcon); // Append the icon to the controlUI div

            teeDiv.appendChild(controlUI);

            // Set CSS for the control interior.
            var controlText = document.createElement('div');
            controlText.style.color = 'rgb(25,25,25)';
            controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
            controlText.style.paddingLeft = '5px';
            controlText.style.paddingRight = '5px';
            controlUI.appendChild(controlText);

            //Show Tee Location
            var isYellow = true; // Flag to track the color of the marker
                    controlUI.addEventListener('click', function () {
                        console.log('clicked');
                        // Toggle the marker color
                        if (isYellow) {
                            customControlIcon.src = 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png';
                            isYellow = false;
                        } else {
                            customControlIcon.src = 'https://maps.google.com/mapfiles/ms/icons/yellow-dot.png';
                            isYellow = true;
                        }

                        navigator.geolocation.getCurrentPosition(function (location) {



                            if (typeof markerT === 'undefined' && typeof markerD === 'undefined') {
                                controlUI.style.backgroundColor = '#666';
                                controlText.style.color = '#fff';
                                markerT = new google.maps.Marker({
                                    draggable: true,
                                    position: new google.maps.LatLng(location.coords.latitude, location.coords.longitude),
                                    map: map,
                                    icon: 'https://maps.google.com/mapfiles/ms/icons/yellow-dot.png'
                                });

                            } else if (typeof markerT !== 'undefined' && typeof markerD === 'undefined') {

                                markerD = new google.maps.Marker({
                                    draggable: true,
                                    position: new google.maps.LatLng(location.coords.latitude, location.coords.longitude),
                                    map: map,
                                    icon: 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png'
                                });
                            }

                        });

                    });

        }

        var pin =  function() {
            if (document.querySelector('.front9') !== null) {
                var h1 = parseInt(document.getElementById("hole1").getElementsByTagName('div')[1].innerHTML.trim());
                var h2 = parseInt(document.getElementById("hole2").getElementsByTagName('div')[1].innerHTML.trim());
                var h3 = parseInt(document.getElementById("hole3").getElementsByTagName('div')[1].innerHTML.trim());
                var h4 = parseInt(document.getElementById("hole4").getElementsByTagName('div')[1].innerHTML.trim());
                var h5 = parseInt(document.getElementById("hole5").getElementsByTagName('div')[1].innerHTML.trim());
                var h6 = parseInt(document.getElementById("hole6").getElementsByTagName('div')[1].innerHTML.trim());
                var h7 = parseInt(document.getElementById("hole7").getElementsByTagName('div')[1].innerHTML.trim());
                var h8 = parseInt(document.getElementById("hole8").getElementsByTagName('div')[1].innerHTML.trim());
                var h9 = parseInt(document.getElementById("hole9").getElementsByTagName('div')[1].innerHTML.trim());


                //front9
                if (h1 === 0 && h2 === 0 & h3 === 0 && h4 === 0 && h5 === 0 && h6 === 0 && h7 === 0 && h8 === 0 && h9 === 0) {
                    var p2 = new google.maps.LatLng(linkLoc[0]["lat1"], linkLoc[0]["ln1"]);
                    var too = "1st hole";
                    return [p2, too];
                };

                if (h1 !== 0 && h2 === 0 & h3 === 0 && h4 === 0 && h5 === 0 && h6 === 0 && h7 === 0 && h8 === 0 && h9 === 0) {
                    var p2 = new google.maps.LatLng(linkLoc[0]["lat2"], linkLoc[0]["ln2"]);
                    var too = "2nd hole";
                    return [p2, too];
                };

                if (h1 !== 0 && h2 !== 0 & h3 === 0 && h4 === 0 && h5 === 0 && h6 === 0 && h7 === 0 && h8 === 0 && h9 === 0) {
                    var p2 = new google.maps.LatLng(linkLoc[0]["lat3"], linkLoc[0]["ln3"]);
                    var too = "3rd hole";
                    return [p2, too];
                }

                if (h1 !== 0 && h2 !== 0 & h3 !== 0 && h4 === 0 && h5 === 0 && h6 === 0 && h7 === 0 && h8 === 0 && h9 === 0) {
                    var p2 = new google.maps.LatLng(linkLoc[0]["lat4"], linkLoc[0]["ln4"]);
                    var too = "4th hole";
                    return [p2, too];
                };

                if (h1 !== 0 && h2 !== 0 & h3 !== 0 && h4 !== 0 && h5 === 0 && h6 === 0 && h7 === 0 && h8 === 0 && h9 === 0) {
                    var p2 = new google.maps.LatLng(linkLoc[0]["lat5"], linkLoc[0]["ln5"]);
                    var too = "5th hole";
                    return [p2, too];
                };

                if (h1 !== 0 && h2 !== 0 & h3 !== 0 && h4 !== 0 && h5 !== 0 && h6 === 0 && h7 === 0 && h8 === 0 && h9 === 0) {
                    var p2 = new google.maps.LatLng(linkLoc[0]["lat6"], linkLoc[0]["ln6"]);
                    var too = "6th hole";
                    return [p2, too];
                };

                if (h1 !== 0 && h2 !== 0 & h3 !== 0 && h4 !== 0 && h5 !== 0 && h6 !== 0 && h7 === 0 && h8 === 0 && h9 === 0) {
                    var p2 = new google.maps.LatLng(linkLoc[0]["lat7"], linkLoc[0]["ln7"]);
                    var too = "7th hole";
                    return [p2, too];
                };

                if (h1 !== 0 && h2 !== 0 & h3 !== 0 && h4 !== 0 && h5 !== 0 && h6 !== 0 && h7 !== 0 && h8 === 0 && h9 === 0) {
                    var p2 = new google.maps.LatLng(linkLoc[0]["lat8"], linkLoc[0]["ln8"]);
                    var too = "8th hole";
                    return [p2, too];
                };

                if (h1 !== 0 && h2 !== 0 & h3 !== 0 && h4 !== 0 && h5 !== 0 && h6 !== 0 && h7 !== 0 && h8 !== 0 && h9 === 0) {
                    var p2 = new google.maps.LatLng(linkLoc[0]["lat9"], linkLoc[0]["ln9"]);
                    var too = "9th hole";
                    return [p2, too];
                };
            }
            else
                if (document.querySelector('.back9') !== null) {
                    var h10 = parseInt(document.getElementById("hole10").getElementsByTagName('div')[1].innerHTML.trim());
                    var h11 = parseInt(document.getElementById("hole11").getElementsByTagName('div')[1].innerHTML.trim());
                    var h12 = parseInt(document.getElementById("hole12").getElementsByTagName('div')[1].innerHTML.trim());
                    var h13 = parseInt(document.getElementById("hole13").getElementsByTagName('div')[1].innerHTML.trim());
                    var h14 = parseInt(document.getElementById("hole14").getElementsByTagName('div')[1].innerHTML.trim());
                    var h15 = parseInt(document.getElementById("hole15").getElementsByTagName('div')[1].innerHTML.trim());
                    var h16 = parseInt(document.getElementById("hole16").getElementsByTagName('div')[1].innerHTML.trim());
                    var h17 = parseInt(document.getElementById("hole17").getElementsByTagName('div')[1].innerHTML.trim());
                    var h18 = parseInt(document.getElementById("hole18").getElementsByTagName('div')[1].innerHTML.trim());


                    //Back9
                    if (h10 === 0 && h11 === 0 & h12 === 0 && h13 === 0 && h14 === 0 && h15 === 0 && h16 === 0 && h17 === 0 && h18 === 0) {
                        var p2 = new google.maps.LatLng(linkLoc[0]["lat10"], linkLoc[0]["ln10"]);
                        var too = "10th hole";
                        return [p2, too];
                    };

                    if (h10 !== 0 && h11 === 0 & h12 === 0 && h13 === 0 && h14 === 0 && h15 === 0 && h16 === 0 && h17 === 0 && h18 === 0) {
                        var p2 = new google.maps.LatLng(linkLoc[0]["lat11"], linkLoc[0]["ln11"]);
                        var too = "11th hole";
                        return [p2, too];
                    };

                    if (h10 !== 0 && h11 !== 0 & h12 === 0 && h13 === 0 && h14 === 0 && h15 === 0 && h16 === 0 && h17 === 0 && h18 === 0) {
                        var p2 = new google.maps.LatLng(linkLoc[0]["lat12"], linkLoc[0]["ln12"]);
                        var too = "12th hole";
                        return [p2, too];
                    }

                    if (h10 !== 0 && h11 !== 0 & h12 !== 0 && h13 === 0 && h14 === 0 && h15 === 0 && h16 === 0 && h17 === 0 && h18 === 0) {
                        var p2 = new google.maps.LatLng(linkLoc[0]["lat13"], linkLoc[0]["ln13"]);
                        var too = "13th hole";
                        return [p2, too];
                    };

                    if (h10 !== 0 && h11 !== 0 & h12 !== 0 && h13 !== 0 && h14 === 0 && h15 === 0 && h16 === 0 && h17 === 0 && h18 === 0) {
                        var p2 = new google.maps.LatLng(linkLoc[0]["lat14"], linkLoc[0]["ln14"]);
                        var too = "14th hole";
                        return [p2, too];
                    };

                    if (h10 !== 0 && h11 !== 0 & h12 !== 0 && h13 !== 0 && h14 !== 0 && h15 === 0 && h16 === 0 && h17 === 0 && h18 === 0) {
                        var p2 = new google.maps.LatLng(linkLoc[0]["lat15"], linkLoc[0]["ln15"]);
                        var too = "15th hole";
                        return [p2, too];
                    };

                    if (h10 !== 0 && h11 !== 0 & h12 !== 0 && h13 !== 0 && h14 !== 0 && h15 !== 0 && h16 === 0 && h17 === 0 && h18 === 0) {
                        var p2 = new google.maps.LatLng(linkLoc[0]["lat16"], linkLoc[0]["ln16"]);
                        var too = "16th hole";
                        return [p2, too];
                    };

                    if (h10 !== 0 && h11 !== 0 & h12 !== 0 && h13 !== 0 && h14 !== 0 && h15 !== 0 && h16 !== 0 && h17 === 0 && h18 === 0) {
                        var p2 = new google.maps.LatLng(linkLoc[0]["lat17"], linkLoc[0]["ln17"]);
                        var too = "17th hole";
                        return [p2, too];
                    };

                    if (h10 !== 0 && h11 !== 0 & h12 !== 0 && h13 !== 0 && h14 !== 0 && h15 !== 0 && h16 !== 0 && h17 !== 0 && h18 === 0) {
                        var p2 = new google.maps.LatLng(linkLoc[0]["lat18"], linkLoc[0]["ln18"]);
                        var too = "18th hole";
                        return [p2, too];
                    };
                }
                else {
                    var p2 = new google.maps.LatLng(linkLoc[0]["lat1"], linkLoc[0]["ln1"]);
                    var too = "Shaker";
                    return [p2, too];
                };
        }

        //have to create another function thats almost a duplicate of getDistanceToLink to enable distane
        function getDistanceToPoint(position) {

            //show map variable
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 18,
                mapTypeId: google.maps.MapTypeId.SATELLITE,
                mapTypeControl: false,
                fullscreenControl: false,
                streetViewControl: false,
                zoomControl: false,
            });
            // Create the DIV to hold the control and call the CenterControl()
            // constructor passing in this DIV.
            var centerControlDiv = document.createElement('div');
            var centerControl = new CenterControl(centerControlDiv, map);
            centerControlDiv.index = 1;
            map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(centerControlDiv);


            var drivesControlDiv = document.createElement('div');
            var drivesControl = new DrivesControl(drivesControlDiv);
            drivesControlDiv.map = map; // Store the map instance in the controlDiv
            drivesControlDiv.index = 2;
            map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(drivesControlDiv);

            // Create the DIV to hold the control and call the CenterControl()
            // constructor passing in this DIV.
            var compassControlDiv = document.createElement('div');
            var compassControl = new CompassControl(compassControlDiv, map);
            compassControlDiv.index = 3;
            map.controls[google.maps.ControlPosition.TOP_CENTER].push(compassControlDiv);

            // Create the DIV to hold the control and call the CenterControl()
            // constructor passing in this DIV.
            var distanceControlDiv = document.createElement('div');
            var distanceControl = new DriveDistanceControl(distanceControlDiv, map);
            distanceControlDiv.index = 4;
            map.controls[google.maps.ControlPosition.TOP_RIGHT].push(distanceControlDiv);


            var teeControlDiv = document.createElement('div');
            var teeControl = new TeeControl(teeControlDiv, map);
            teeControlDiv.index = 5;
            map.controls[google.maps.ControlPosition.LEFT_CENTER].push(teeControlDiv);


            // Create the DIV to hold the control and call the CenterControl()
            // constructor passing in this DIV.
            var cardControlDiv = document.createElement('div');
            var cardControl = new CardControl(cardControlDiv, map);
            cardControlDiv.index = 6;
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(cardControlDiv);

            //START//
            //This measures the distance to any place from the current location.
            navigator.geolocation.getCurrentPosition(function (location) {
                marker1 = new google.maps.Marker({
                    icon: new google.maps.MarkerImage('https://maps.gstatic.com/mapfiles/mobile/mobileimgs2.png',
                        new google.maps.Size(22, 22),
                        new google.maps.Point(0, 18),
                        new google.maps.Point(11, 11)),
                    position: { lat: position.coords.latitude, lng: position.coords.longitude },
                    draggable: true,
                    map: map
                });

                marker2 = new google.maps.Marker({
                    map: map,
                    draggable: true,
                    position: { lat: position.coords.latitude, lng: position.coords.longitude },
                });

                var bounds = new google.maps.LatLngBounds(
                    marker1.getPosition(), marker2.getPosition());
                map.fitBounds(bounds);

                google.maps.event.addListener(marker1, 'position_changed', update);
                google.maps.event.addListener(marker2, 'position_changed', update);
                var lineSymbol = {
                    path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
                    scale: 2
                };
                poly = new google.maps.Polyline({
                    icons: [{ icon: lineSymbol }],
                    strokeColor: '#FF0000',
                    strokeOpacity: 1.0,
                    strokeWeight: 3,
                    map: map,
                });
                update();

            });

            const infoWindow = new google.maps.InfoWindow();
            function update() {
                infoWindow.setContent(`<div id="distanceFt">Your Location</div>`);
                // Open the info window immediately
                infoWindow.open(map, marker2);
                var path = [marker1.getPosition(), marker2.getPosition()];
                poly.setPath(path);
                $("#distanceFt").css({ "color": "black", 'font-size': '3em', 'left': '0' });
                $("#distanceFt").html((calcDistance(path[0], path[1]) * 1093.61).toFixed(2) + " yds");
            }
            //END//

            $("#map").css({ "width": "100%", "height": "83%", "margin-left": "0", "margin-top": "26px", "position": "absolute" });
            $(".page-content").css({ "height": "unset !important", "padding-top": "0", "padding-bottom": "0", "top": "100px" });

        };
        /////////////////////////////////////////////////////////////////////////////////////////////////
        function getDistanceToLink(position) {

            //show map variable
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 18,
                mapTypeId: google.maps.MapTypeId.SATELLITE,
                mapTypeControl: false,
                fullscreenControl: false,
                streetViewControl: false,
                zoomControl: false,
            });
            // Create the DIV to hold the control and call the CenterControl()
            // constructor passing in this DIV.
            var centerControlDiv = document.createElement('div');
            var centerControl = new CenterControl(centerControlDiv, map);
            centerControlDiv.index = 1;
            map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(centerControlDiv);


            var drivesControlDiv = document.createElement('div');
            var drivesControl = new DrivesControl(drivesControlDiv);
            drivesControlDiv.map = map; // Store the map instance in the controlDiv
            drivesControlDiv.index = 2;
            map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(drivesControlDiv);

            // Create the DIV to hold the control and call the CenterControl()
            // constructor passing in this DIV.
            var compassControlDiv = document.createElement('div');
            var compassControl = new CompassControl(compassControlDiv, map);
            compassControlDiv.index = 3;
            map.controls[google.maps.ControlPosition.TOP_CENTER].push(compassControlDiv);

            // Create the DIV to hold the control and call the CenterControl()
            // constructor passing in this DIV.
            var distanceControlDiv = document.createElement('div');
            var distanceControl = new DriveDistanceControl(distanceControlDiv, map);
            distanceControlDiv.index = 4;
            map.controls[google.maps.ControlPosition.TOP_RIGHT].push(distanceControlDiv);


            var teeControlDiv = document.createElement('div');
            var teeControl = new TeeControl(teeControlDiv, map);
            teeControlDiv.index = 5;
            map.controls[google.maps.ControlPosition.LEFT_CENTER].push(teeControlDiv);


            // Create the DIV to hold the control and call the CenterControl()
            // constructor passing in this DIV.
            var cardControlDiv = document.createElement('div');
            var cardControl = new CardControl(cardControlDiv, map);
            cardControlDiv.index = 6;
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(cardControlDiv);


            //Calculate distance from current location to the flag
            var pins = new pin();
            var p2 = pins[0];
            var too = pins[1];

            function onSuccess(position) {

                var l = position.coords.latitude.toFixed(6);
                var s = position.coords.longitude.toFixed(6);
                var p1 = new google.maps.LatLng(l, s);

                $("#distance").parent('div').css({ "background-color": "black", "color": "white" });
                $("#distance").css({ "color": "white", 'font-size': '1.3em', 'left': '0' });
                $("#distance").html((calcDistance(p1, p2) * 1093.61).toFixed(2) + " yd to " + too);
            }

            // onError Callback receives a PositionError object
            function onError(error) {
                alert('code: ' + error.code + '\n' +
                      'message: ' + error.message + '\n');
            }

            // Options: throw an error if no update is received every 30 seconds.
            navigator.geolocation.watchPosition(onSuccess, onError, { timeout: 30000, enableHighAccuracy: true });
            map.setCenter(p2);

            $("#map").css({ "width": "100%", "height": "83%", "margin-left": "0", "margin-top": "26px", "position": "absolute" });
            $(".page-content").css({ "height": "unset !important", "padding-top": "0", "padding-bottom": "0", "top":"100px" });


            // Creating a marker and positioning it on the map
            var marker = new google.maps.Marker({
                position: p2,
                icon: new google.maps.MarkerImage('/Content/flag2.png'),
                animation: google.maps.Animation.DROP,
                map: map
            });
        };


        //For iphone standalone app
        if (("standalone" in window.navigator) && window.navigator.standalone) {
            var noddy, remotes = false;
            document.addEventListener('click', function (event) {
                noddy = event.target;
                while (noddy.nodeName !== "A" && noddy.nodeName !== "HTML") {
                    noddy = noddy.parentNode;
                }
                if ('href' in noddy && noddy.href.indexOf('http') !== -1 && (noddy.href.indexOf(document.location.host) !== -1 || remotes)) {
                    event.preventDefault();
                    document.location.href = noddy.href;
                }
            }, false);
        }
    </script>
</body>
</html>